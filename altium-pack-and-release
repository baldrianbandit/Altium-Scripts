#!/bin/sh
## This script packs Altium PCB manufacturing data, assembly data and docs into zip files according
## to Laytec's ERP numbers. Brderp is the number of the PCB itself, while PRJNMBR ist the number of
## the assembled PCB.
## Usage: Enter the Altium project's directory and run: pack-and-release <Revision>
## Suggested Altium output jobs: Laytec_Std_Unified.OutJob and Laytec_Std_Unified-NoRM.OutJob
## AF 22/02/2017
VERSION=27-06-2017

## Settings
## =================================================================================================

## Capture first argument
ARG="$1"

## Define working directorys
PRJPATH="$(pwd)"
DEFWORKPATH='"${PRJPATH}/${REVNAME}${REV}/${OUTPUTPATH}"'

## File to read / store ERP info
ERPFILE="${PRJPATH}/.erpinfo"

## Define Laytec release path
RELEASEDPATH="/ltfs/bureau/Produkte/Dokumente/Technische Zeichnungen/RELEASED/"

## Define revision prefix
REVNAME="rev-"

## Define other programs to use
EDITOR=vim
SOFFICE=soffice
HTMLDOC=htmldoc

## Define file extensions
ALTIUMPDFEXT=".PDF"
PDFEXT=".pdf"
SPECDOCEXT=".tex"
BOMDOCEXT=".xls"
PPEXT=".txt"
TEXEXT=".tex"

## File name seperator
SEP="-"

## Define Altium output paths
OUTPUTPATH="Outputs"
BRDPATH="Fabrication"
BRDDOCPATH="Fabrication/Docs"
DEFBOMPATH='"Assembly $CURPRJNMBR/BOM"'
DEFPPPATH='"Assembly $CURPRJNMBR/Pick Place"'
DEFASMDOCPATH='"Assembly $CURPRJNMBR/Docs"'
DEFSCHPATH='"Assembly $CURPRJNMBR/Schematics"'

## Define Altium file naming 
SPECDESC="Spec"
BOMDESC="BOM"
ALTIUMSCHEXT="Schematics${ALTIUMPDFEXT}"
ALTIUMASMEXT="Assembly${ALTIUMPDFEXT}"
ALTIUMFABEXT="Drawings${ALTIUMPDFEXT}"
TOPRENDER="Rendering-Top${ALTIUMPDFEXT}"
BOTRENDER="Rendering-Bottom${ALTIUMPDFEXT}"

## Define Tex paths
TEXTEMPLATEPATH="/ltfs/rnd/Software/Tex/pcb-spec-template"
TEXTEMPLATE="pcb-spec-template"
VARTEMPLATE="pcb-spec-variables"

## Name of the PCB specification file
DEFSPECFILE='"${BRDNMBR}${SEP}${SPECDESC}${PDFEXT}"'
DEFSPECFILETEX='"${BRDNMBR}${SEP}${SPECDESC}${TEXEXT}"'

## List of files / folders containing the PCB manufacturing data
## Removed ODB and IPC since wine has XML export issues
DEFBRDFILESLIST='"$BRDDOCPATH/$BRDNMBR$SEP$ALTIUMFABEXT":"$BRDPATH/Gerber":"$BRDPATH/GerberX2"\
:"$BRDPATH/NC Drill":"$BRDPATH/ODB"'

## List of files / folders containing pick place and bom data
DEFPRJFILESLIST='"$BOMPATH/$CURPRJNMBR$SEP$BOMDESC$BOMDOCEXT"\
:"$BOMPATH/$CURPRJNMBR$SEP$BOMDESC$PDFEXT":"$PPPATH/$CURPRJNMBR$PPEXT"\
:"$ASMDOCPATH/$CURPRJNMBR$SEP$ALTIUMASMEXT"'

## List of files that we do not want to get zipped
DEFIGNOREFILESLIST='"*.OutputStatus":"Status Report.*":"*Renderings*"' 


## Functions declaration
## =================================================================================================

## Help
function help ()
{
	local arg="$1"
        case "$arg" in
                --help|-h)
                        echo Laytec pack-and-release script for Altium\'s PCB manufacturing\
                                and assembly data.
                        echo Usage:
                        echo '        'cd '<project directory>'
                        echo '        'pack-and-release '<revision>'
                        echo
                        echo It is highly recommende to use one of the following Altium output jobs\
                                for data generation:
                        echo '        * Laytec_Std_Unified.Outjob'
                        echo '        * Laytec_Std_Unified-NoRM.Outjob'
                        echo
                        exit
                        ;;
                --version|-v)
                        echo This is pack-and-release, version "$VERSION".
                        echo
                        exit
                        ;;
                "")     
                        echo Run pack-and-release --help for info.
                        echo
                        exit
                        ;;
                *)
        esac
        
        ## Check if revision exists
        if [ ! -e ${PRJPATH}/${arg} ]
        then
                echo Error: Revision "$arg" not found. Exiting.
                echo
                exit
        fi

	## Now since Revision $arg exists, generate global $REV and $workpath
	REV=$(sed "s/$REVNAME//" <<< $arg)
	eval workpath="$DEFWORKPATH"
}

## Read the project's ERP number(s) or set them, if none
## Brdnmbr is the number of the PCB itself, while PRJNMBR is the number of the 
## assembled PCB
## -------------------------------------------------------------------------------------------------
function erpinfo ()
{
        if [ -e "$ERPFILE" ]
        then
                source "$ERPFILE"
		echo
		echo "Info: Currently released version is ${REVNAME}${RELEASEDREV}."
        fi
        echo        
        if [ ! -z "$PRJNMBR" ] && [ ! -z "$BRDNMBR" ]
        then
                echo 'ERP board number found:' "$BRDNMBR"
                echo 'ERP project numbers found:' "$PRJNMBR"
        else
                echo 'Enter board number: '
                read BRDNMBR
                echo 'Enter project number(s): '
                read PRJNMBR
                echo "BRDNMBR=$BRDNMBR" > "$ERPFILE"
                echo "PRJNMBR=\"$PRJNMBR\"" >> "$ERPFILE"
		echo "RELEASEDREV=none" "" "$ERPFILE"
        fi
}


## Copy a file into laytec released path
## -------------------------------------------------------------------------------------------------
function release ()
{
        local path="$1"
        local file="$2"
        if [ -e "$path/$file" ]
        then
                echo
                echo 'Release '"${path}/${file}"'?'
                local yn
                local BETARELEASE=1
                select yn in "Yes" "No";
                do
                        case $yn in
                                Yes)
                                        cp "${path}/${file}" "$RELEASEDPATH"
                                        BETARELEASE=0
					sed -i "s/RELEASEDREV\=.*/RELEASEDREV\=$REV/" "$ERPFILE"
                                        echo 'Done.'
                                        break;;
                                No)
                                        break;;
                        esac
                done
                
                if [ "$BETARELEASE" -eq 1 ]
                then
                        echo
                        echo "Release as prototype?"
                        select yn in "Yes" "No";
                        do
                                case $yn in
                                        Yes)
                                                cp "${path}/${file}" "${RELEASEDPATH}/p${file}"
						sed -i "s/RELEASEDREV\=.*/RELEASEDREV\=proto/" "$ERPFILE"
                                                echo 'Done. '
                                                break;;
                                        No)
                                                break;;
                                esac
                        done
                fi
        fi
}


## Create a tex documentation
## Arg1: project path; arg2: ERP_PCB; arg3: document description; arg4: file extension
## Example: maketex "../../" "123456-000" "spec" "tex"
## -------------------------------------------------------------------------------------------------
function maketex ()
{
        local specvars="${PRJPATH}/${BRDNMBR}${SEP}${SPECDESC}${SPECDOCEXT}"
        local pdfname="${PRJPATH}/${BRDNMBR}${SEP}${SPECDESC}${PDFEXT}"
        local docdesc="$SPECDESC"
        local printtop="${workpath}/${BRDDOCPATH}/${BRDNMBR}${SEP}${TOPRENDER}"
        local printbottom="${workpath}/${BRDDOCPATH}/${BRDNMBR}${SEP}${BOTRENDER}"
        ## That eval depends on BRDNMBR and PRJNMBR to be set
	local specfile
        eval specfile="$DEFSPECFILE"

	cd "$PRJPATH"

        ## Create temporary dir with tex templates for pdf generation
        local textmp="$PRJPATH/pcb-spec-template"
        cp -r "$TEXTEMPLATEPATH" "$PRJPATH/"

        ## Copy Altium 3d prints into temporary dir, if any
        if [ ! -e "$printtop" ] || [ ! -e "$printbottom" ]
        then
                echo
                echo Warning: Missing 3d prints:
                echo "$printtop" and
                echo "$printbottom"
        else
                cp "$printtop" "${textmp}/print-top.pdf"
                cp "$printbottom" "${textmp}/print-bottom.pdf"
        fi

        ## Check for existing spec document
        if [ -e $specvars ]
        then
                echo
                echo Existing document found: "$specvars". Edit?
                local yn
                select yn in "Yes" "No"
                do
                        case "$yn" in
                                Yes)	echo
                                        echo 'Edit '"$specvars"' and select Ready.'
                                        "$EDITOR" "$specvars"
                                        select dc in "Ready"; 
                                        do
                                              case "$dc" in
                                                        Ready)  break;;
                                              esac
                                        done
                                        break;;
                                No)     break;;
                        esac
                done
        ## Or create spec document from template
        else
                if [ "$docdesc" == "$SPECDESC" ]
                then
                        echo
                        echo Info: No spec variables found.
                        echo Creating new "$specvars" from template.
                        echo Edit the file and save your changes.
                        cp "${textmp}/${VARTEMPLATE}${TEXEXT}" "$specvars"
                        chmod +w "$specvars"

                        ## Save ERP numbers in spec file
                        eval specfiletex="$DEFSPECFILETEX"
                        sed -i "s/000000-000/${BRDNMBR}/" "${PRJPATH}/${specfiletex}" 
                        sed -i "s/000001-000/${PRJNMBR}/" "${PRJPATH}/${specfiletex}" 
                        sleep 2
                        "$EDITOR" "$specvars"
                else
                        echo
                        echo 'Warning: No' "$docdesc" 'document' "$specvars" 'found.'
                        echo 'Check for missing file and re-run.'
                        exit        
                fi

        fi

        ## Create working copy of variables file
        cp "$specvars" "${textmp}/variables${TEXEXT}"
        ## Run xelatex in temporary dir, move output pdf into project dir and delete temporary dir
        cd "$textmp"
        echo
        echo "Creating documentation..."
        xelatex -halt-on-error "${TEXTEMPLATE}${TEXEXT}" >/dev/null
        cp "${TEXTEMPLATE}${PDFEXT}" "${PRJPATH}/${specfile}"
        cp "${TEXTEMPLATE}${PDFEXT}" "${workpath}/${specfile}"
        cd "$workpath"
        rm -rf "$textmp"
        echo "Done."
}


## Create zip archives of documentation, manufacturing data and pick and place as follows:
## 1) Create a zip package BRDNMBR with just the PCB manufacturing data
## 2) Create a zip package PRJNMBR with both PCB manufacturing data and assembly data, if available
## -------------------------------------------------------------------------------------------------
function zippkg ()
{
        local nmbr="$1"	## Current ERP number
        local func="$2" ## Whether to store fabrication data or assembly, too
	cd "$workpath"

	## Zip fabrication data and doc
	echo
	echo 'Creating fabrication package '"$nmbr"'.zip including...' 

	## Generate lists of files to zip
	## These vars must be evaluated, because they depend on $BRDNMBR
	eval specfile="$DEFSPECFILE"
	eval brdfileslist="$DEFBRDFILESLIST"
	eval ignorelist="$DEFIGNOREFILESLIST"
	IFS=$':'
	local i
	for i in $brdfileslist
	do
		if [ ! -e "$i" ]
		then
			echo Missing File: "$i"
			echo Aborting.
			exit
		fi
		echo '  '"$i"
		zip -q -x "$ignorelist" -r -u "$nmbr" "$i"
	done

	## Zip pick place data and bom
	case "$func" in
		prj)
			## Generate list of project files to zip; 
			## this may be run several times
			CURPRJNMBR="$nmbr"
			local BOMPATH=""
			local PPPATH=""
			local ASMDOCPATH=""
			eval PPPATH="$DEFPPPATH"
			eval ASMDOCPATH="$DEFASMDOCPATH"
			eval BOMPATH="$DEFBOMPATH"
			eval prjfileslist="$DEFPRJFILESLIST"
			IFS=$':'
			local i
			for i in $prjfileslist
			do
				if [ ! -e "$i" ]
				then
					echo Missing File: "$i"
					echo Aborting.
					exit
				fi
				echo '  '"$i"
				zip -q -x "$ignorelist" -r -u "$nmbr" "$i"
			done
		;;
	esac

	## Move zip into project path and add specification pdf
	OLDPATH=$(pwd)
	mv "${nmbr}.zip" "$PRJPATH/"
	cd "$PRJPATH"
	zip -q -u "${nmbr}.zip" "$specfile"
	echo '  '"$specfile"
	cd "$OLDPATH"
	echo 'Done.'
}


## Convert an excel document into a nice and readable pdf table using SOFFICE, in this case
## soffice, and htmldoc
## -------------------------------------------------------------------------------------------------
function bom2pdf ()
{
        local docname="$1"
        local docext="$2"
        local htmlname="${docname}.html"
        local pdfname="${docname}${PDFEXT}"
	local BOMPATH=""
	eval BOMPATH="$DEFBOMPATH"
	cd "$BOMPATH"

        if [ ! -e ${docname}${docext} ]
        then
                echo
                echo 'Warning: No document' "${docname}${docext}" 'found.'
                exit
        fi
        echo
        echo 'Creating '"$pdfname"' from '"${docname}${docext}"'...'
	## Convert office table to html
	if [[ $(pgrep "$SOFFICE") > 0 ]]
	then
		echo
		echo "Warning: $SOFFICE already running!"
		echo
	fi
	"$SOFFICE" --calc --convert-to html "${docname}${docext}"\
	>/dev/null 2>&1
	## Convert html table to pdf
	"$HTMLDOC" --quiet --webpage --textfont Arial --bodyfont Arial\
	--fontsize 10 --size 297x210mm --left 10mm --top 10mm\
	-f "$pdfname" "$htmlname" 

	rm -f "$htmlname"
	cd "$workpath"
	echo 'Done.'
}


## Run the script
## =================================================================================================

## Evaluate working paths and how help if needed
help "$ARG"

## Check for existing erp info or create new, if not existing
## Set global vars 'BRDNMBR' and 'PRJNMBR'
erpinfo

echo
echo '  --------------------------------------------------'
echo '   PCB Fabrication: '"$BRDNMBR"
echo '  --------------------------------------------------'


## Create a new spec document from template or edit, if existing
maketex "$PRJPATH" "$BRDNMBR" "$SPECDESC" "$SPECDOCEXT"

## Create zip package for pcb manufacturer
zippkg "$BRDNMBR" 'brd'

## Copy this to released folder
release "$PRJPATH" "${BRDNMBR}.zip"

## If there exists ERP project number, assuming that there is assembly data
## and thus, create assembly zip package as well
if [ "$PRJNMBR" != "" ] && [ "$PRJNMBR" != "--" ]
then
        IFS=$' '
        for CURPRJNMBR in $PRJNMBR
        do
                echo
                echo '  --------------------------------------------------'
                echo '   PCB Assembly: '"$CURPRJNMBR"
                echo '  --------------------------------------------------'

                ## Create pdf from bom document
                bom2pdf "$CURPRJNMBR$SEP$BOMDESC" "$BOMDOCEXT"

                ## Create zip package for pcb manufacturing and assembly
                zippkg "$CURPRJNMBR" 'prj'

                ## Release manufacturing data
                release "${PRJPATH}" "${CURPRJNMBR}.zip"

                ## Release schematics
		eval SCHPATH="$DEFSCHPATH"
                release "${SCHPATH}" "${CURPRJNMBR}${SEP}${ALTIUMSCHEXT}"
        done
fi
