#!/bin/sh
## This script packs Altium PCB manufacturing data, assembly data and docs into zip files according
## to Laytec's ERP numbers. Brderp is the number of the PCB itself, while PRJNMBR ist the number of
## the assembled PCB.
## Usage: Enter the Altium project's directory and run: pack-and-release <Revision>
## Suggested Altium output jobs: Laytec_Std_Unified.OutJob and Laytec_Std_Unified-NoRM.OutJob
## AF 22/02/2017
VERSION=14-09-2017

## Settings
## =================================================================================================

## Capture first argument
ARG="$1"

## Define working directorys
PRJPATH="$(pwd)"
DEFWORKPATH='"${PRJPATH}/${REVNAME}${REV}/${OUTPUTPATH}"'

## File to read / store ERP info
ERPFILE="${PRJPATH}/.erpinfo"

## Define Laytec release path
RELEASEDPATH="/ltfs/bureau/Produkte/Dokumente/Technische Zeichnungen/RELEASED/"

## Define revision prefix
REVNAME="rev-"

## Define other programs to use
EDITOR=vim
SOFFICE=soffice
HTMLDOC=htmldoc

## Define file extensions
ALTIUMPDFEXT=".PDF"
PDFEXT=".pdf"
SPECDOCEXT=".tex"
BOMDOCEXT=".xls"
PPEXT=".txt"
TEXEXT=".tex"

## File name seperator
SEP="-"

## Define Altium output paths
OUTPUTPATH="Outputs"
BRDPATH="Fabrication"
BRDDOCPATH="Fabrication/Docs"
DEFBOMPATH='"Assembly $CURPRJNMBR/BOM"'
DEFPPPATH='"Assembly $CURPRJNMBR/Pick Place"'
DEFASMDOCPATH='"Assembly $CURPRJNMBR/Docs"'
DEFSCHPATH='"Assembly $CURPRJNMBR/Schematics"'

## Define Altium file naming 
SPECDESC="Spec"
BOMDESC="BOM"
ALTIUMSCHEXT="Schematics${ALTIUMPDFEXT}"
ALTIUMASMEXT="Assembly${ALTIUMPDFEXT}"
ALTIUMFABEXT="Drawings${ALTIUMPDFEXT}"
TOPRENDER="Rendering-Top${ALTIUMPDFEXT}"
BOTRENDER="Rendering-Bottom${ALTIUMPDFEXT}"

## Define Tex paths
TEXTEMPLATEPATH="/ltfs/rnd/Software/Tex/pcb-spec-template"
PCBTEXTEMPLATE="pcb-spec-template"
PCBVARTEMPLATE="pcb-spec-variables"
ASMTEXTEMPLATE="assembly-spec-template"
ASMVARTEMPLATE="assembly-spec-variables"
TEXTMP=/tmp/textmp

## Name of the PCB specification file
DEFPCBSPECFILE='"${BRDNMBR}${SEP}PCB${PDFEXT}"'
DEFASMSPECFILE='"${CURPRJNMBR}${SEP}ASM${PDFEXT}"'
DEFPCBVARSTEX='"${BRDNMBR}${SEP}${SPECDESC}${TEXEXT}"'
DEFASMVARSTEX='"${CURPRJNMBR}${SEP}${SPECDESC}${TEXEXT}"'

## List of files / folders containing the PCB manufacturing data
## Removed ODB and IPC since wine has XML export issues
DEFBRDFILESLIST='"$BRDDOCPATH/$BRDNMBR$SEP$ALTIUMFABEXT":"$BRDPATH/Gerber":"$BRDPATH/GerberX2"\
:"$BRDPATH/NC Drill":"$BRDPATH/ODB"'

## List of files / folders containing pick place and bom data
DEFPRJFILESLIST='"$BOMPATH/$CURPRJNMBR$SEP$BOMDESC$BOMDOCEXT"\
:"$BOMPATH/$CURPRJNMBR$SEP$BOMDESC$PDFEXT":"$PPPATH/$CURPRJNMBR$PPEXT"\
:"$ASMDOCPATH/$CURPRJNMBR$SEP$ALTIUMASMEXT"'

## List of files that we do not want to get zipped
DEFIGNOREFILESLIST='"*.OutputStatus":"Status Report.*":"*Renderings*"' 


## Functions declaration
## =================================================================================================

## Help
function help ()
{
	local ARG="$1"
        case "$ARG" in
                --help|-h)
                        echo Laytec pack-and-release script for Altium\'s PCB manufacturing\
                                and assembly data.
                        echo Usage:
                        echo '        'cd '<project directory>'
                        echo '        'pack-and-release '<revision>'
                        echo
                        echo It is highly recommende to use one of the following Altium output jobs\
                                for data generation:
                        echo '        * Laytec_Std_Unified.Outjob'
                        echo '        * Laytec_Std_Unified-NoRM.Outjob'
                        echo
                        exit
                        ;;
                --version|-v)
                        echo This is pack-and-release, version "$VERSION".
                        echo
                        exit
                        ;;
                "")     
                        echo Run pack-and-release --help for info.
                        echo
                        exit
                        ;;
                *)
        esac
}

## Set global prject path $PRJPATH and working path $WORKPATH
## PRJPATH is the parent project folder, in which the revisions rev-a ... rev-z are to be find, e.g. 123456-NewCard
## WORKPATH is the output folder, to which Altium outputs the fabrication data, e.g. $PRJPATH/rev-a/Outputs
function setpaths ()
{
	local ARG="$1"
        ## Check if revision exists
        if [ ! -e ${PRJPATH}/${ARG} ]
        then
                echo Error: Revision "$ARG" not found. Exiting.
                echo
                exit
        fi

	## Now since Revision $arg exists, generate global $REV and $WORKPATH
	REV=$(sed "s/$REVNAME//" <<< $ARG)
	eval WORKPATH="$DEFWORKPATH"
}

## Read the project's ERP number(s) or set them, if none
## Brdnmbr is the number of the PCB itself, while PRJNMBR is the number of the 
## assembled PCB
## -------------------------------------------------------------------------------------------------
function erpinfo ()
{
        if [ -e "$ERPFILE" ]
        then
                source "$ERPFILE"
        fi

        if [ ! -z "$PRJNMBR" ] && [ ! -z "$BRDNMBR" ]
        then
		echo
                echo 'PCB ERP number found:'
		echo "$BRDNMBR"
		echo
                echo 'Assembly ERP numbers found:'
		local i; IFS=$' '
		for i in $PRJNMBR; do
			echo $i
		done
		echo
		if [ -z $RELEASEDREV ]
		then
			echo "RELEASEDREV=none" >> "$ERPFILE"
		fi
		echo 'Currently released revision:'
		echo "${REVNAME}${RELEASEDREV}"
        else
		echo
		echo 'Missing ERP information.'
                echo 'Enter board number: '
                read BRDNMBR
                echo 'Enter assembly number(s) seperated by spaces: '
                read PRJNMBR
                echo "BRDNMBR=$BRDNMBR" > "$ERPFILE"
                echo "PRJNMBR=\"$PRJNMBR\"" >> "$ERPFILE"
		echo "RELEASEDREV=none" >> "$ERPFILE"
        fi
}


## Release package as final or as prototype. Remove prototype, if final.
## -------------------------------------------------------------------------------------------------
function release ()
{
        local path="$1"
        local file="$2"
        if [ -e "$path/$file" ]
        then
                echo
                echo 'Release '"${path}/${file}"'?'
                local yn
                local BETARELEASE=1
		local BETAFILE="p${file}"
                select yn in "Yes" "No";
                do
                        case $yn in
                                Yes)
                                        BETARELEASE=0
                                        cp "${path}/${file}" "$RELEASEDPATH"
					sed -i "s/RELEASEDREV\=.*/RELEASEDREV\=$REV/" "$ERPFILE"
                                        echo 'Done.'
					if [ -e $RELEASEDPATH/$BETAFILE ]; then
						echo
						echo 'Remove prototype release?'
						select yn in "Yes" "No";
						do
							case $yn in
								Yes)
									rm "${RELEASEDPATH}/${BETAFILE}"
									break;;
								No)
									break;;
							esac
						done
					fi
                                        break;;
                                No)
                                        break;;
                        esac
                done
                
                if [ "$BETARELEASE" -eq 1 ]
                then
                        echo
                        echo "Release as prototype?"
                        select yn in "Yes" "No";
                        do
                                case $yn in
                                        Yes)
                                                cp "${path}/${file}" "${RELEASEDPATH}/${BETAFILE}"
						sed -i "s/RELEASEDREV\=.*/RELEASEDREV\=proto/" "$ERPFILE"
                                                echo 'Done. '
                                                break;;
                                        No)
                                                break;;
                                esac
                        done
                fi
        fi
}


## Create a tex documentation
## Arg1: project path; arg2: ERP_PCB; arg3: document description; arg4: file extension
## Example: maketex "../../" "123456-000" "spec" "tex"
## -------------------------------------------------------------------------------------------------
function maketex ()
{
	local DOCTYPE=$1
	local CURPRJNMBR=$2
	local PCBSPECFILE
	local ASMSPECFILE
	local PCBVARS
	local ASMVARS
	eval PCBSPECFILE="$DEFPCBSPECFILE"
	eval ASMSPECFILE="$DEFASMSPECFILE"
	eval PCBVARS="$DEFPCBVARSTEX"
	eval ASMVARS="$DEFASMVARSTEX"
	eval ASMDOCPATH="$DEFASMDOCPATH"
	local PCBRENDERINGS="${WORKPATH}/${BRDDOCPATH}/${BRDNMBR}${SEP}${ALTIUMFABEXT}"
	local ASMRENDERINGS="${WORKPATH}/${ASMDOCPATH}/${CURPRJNMBR}${SEP}${ALTIUMASMEXT}"

        ## Create temporary dir with tex templates for pdf generation
	mkdir -p "$TEXTMP"
        cp -r "${TEXTEMPLATEPATH}/." "$TEXTMP/"

	## Set variables for current document
	cd "$PRJPATH"
	case $DOCTYPE in
		PCB)
			local curvars=$PCBVARS
			local curtemplate=${PCBVARTEMPLATE}
			local currenderings=$PCBRENDERINGS
			local curnmbr=$BRDNMBR
			;;
		ASM)
			local curvars=$ASMVARS
			local curtemplate=${ASMVARTEMPLATE}
			local currenderings=$ASMRENDERINGS
			local curnmbr=$CURPRJNMBR
			;;
	esac

        ## Check for existing spec document
        if [ -e $curvars ]
        then
                echo
                echo Existing document found: "$curvars". Edit?
                local yn
                select yn in "Yes" "No"
                do
                        case "$yn" in
                                Yes)	echo
                                        echo 'Edit '"$curvars"' and select Ready.'
                                        "$EDITOR" "$curvars"
                                        select dc in "Ready"; 
                                        do
                                              case "$dc" in
                                                        Ready)  break;;
                                              esac
                                        done
                                        break;;
                                No)     break;;
                        esac
                done

        ## Or create spec document from template
        else
		echo
		echo Info: No spec variables found.
		echo Creating new "$curvars" from template.
		echo Edit the file and save your changes.
		cp "${TEXTMP}/${curtemplate}${TEXEXT}" "$curvars"
		chmod +w "$curvars"

		## Save ERP numbers in spec file
		sed -i "s/000000-000/${curnmbr}/" "${PRJPATH}/${curvars}" 
		sleep 2
		"$EDITOR" "$curvars"
        fi

        ## Copy Altium 3d prints into temporary dir
        if [ ! -e "$currenderings" ]
        then
                echo
                echo Error: Missing 3d prints:
                echo "$currenderings"
		exit
        else
                cp "$currenderings" "${TEXTMP}/renderings.pdf"
        fi

        ## Run xelatex in temporary dir, move output pdf into project dir and delete temporary dir
        cd "$TEXTMP"
        echo
	case $DOCTYPE in
		PCB)
			echo "Creating documentation ${PCBSPECFILE}..."
			cp "${PRJPATH}/$PCBVARS" "${TEXTMP}/variables${TEXEXT}"
			xelatex -halt-on-error "${PCBTEXTEMPLATE}${TEXEXT}" >/dev/null
			cp "${PCBTEXTEMPLATE}${PDFEXT}" "${PRJPATH}/${PCBSPECFILE}"
			cp "${PCBTEXTEMPLATE}${PDFEXT}" "${WORKPATH}/${PCBSPECFILE}"
			;;
		ASM)
			echo "Creating documentation ${ASMSPECFILE}..."
			cp "${PRJPATH}/$PCBVARS" "${TEXTMP}/variables${TEXEXT}"
			cp "${PRJPATH}/$ASMVARS" "${TEXTMP}/assemblynotes${TEXEXT}"
			xelatex -halt-on-error "${ASMTEXTEMPLATE}${TEXEXT}" >/dev/null
			cp "${ASMTEXTEMPLATE}${PDFEXT}" "${PRJPATH}/${ASMSPECFILE}"
			cp "${ASMTEXTEMPLATE}${PDFEXT}" "${WORKPATH}/${ASMSPECFILE}"
			;;
	esac
        cd "$WORKPATH"
        rm -rf "$TEXTMP"
        echo "Done."
}


## Create zip archives of documentation, manufacturing data and pick and place as follows:
## 1) Create a zip package BRDNMBR with just the PCB manufacturing data
## 2) Create a zip package PRJNMBR with both PCB manufacturing data and assembly data, if available
## -------------------------------------------------------------------------------------------------
function zippkg ()
{
        local FUNC="$1" ## Whether to store fabrication data or assembly, too
        local CURPRJNMBR="$2"	## Current ERP number
	cd "$WORKPATH"

	## Zip fabrication data and doc
	echo
	echo 'Creating fabrication package '"$CURPRJNMBR"'.zip including...' 

	## Generate lists of files to zip
	## These vars must be evaluated, because they depend on $BRDNMBR
	local SPECFILE1
	local SPECFILE2
	local BRDFILESLIST
	local IGNORELIST
	eval SPECFILE1="$DEFPCBSPECFILE"
	eval SPECFILE2="$DEFASMSPECFILE"
	eval BRDFILESLIST="$DEFBRDFILESLIST"
	eval IGNORELIST="$DEFIGNOREFILESLIST"

	## First step: Create zip with contents in $BRDFILESLIST
	IFS=$':'
	local i
	for i in $BRDFILESLIST
	do
		if [ ! -e "$i" ]
		then
			echo Missing File: "$i"
			echo Aborting.
			exit
		fi
		echo '  '"$i"
		zip -q -x "$IGNORELIST" -r -u "$CURPRJNMBR" "$i"
	done

	## Second step: Zip pick place data and bom
	case "$FUNC" in
		ASM)
			## Generate list of project files to zip; 
			## this may be run several times
			local BOMPATH=""
			local PPPATH=""
			local ASMDOCPATH=""
			eval PPPATH="$DEFPPPATH"
			eval ASMDOCPATH="$DEFASMDOCPATH"
			eval BOMPATH="$DEFBOMPATH"
			eval prjfileslist="$DEFPRJFILESLIST"
			IFS=$':'
			local i
			for i in $prjfileslist
			do
				if [ ! -e "$i" ]
				then
					echo Missing File: "$i"
					echo Aborting.
					exit
				fi
				echo '  '"$i"
				zip -q -x "$IGNORELIST" -r -u "$CURPRJNMBR" "$i"
			done
			## Add assembly spec document
			zip -q -u "${CURPRJNMBR}.zip" "$SPECFILE2" 
			echo '  '"$SPECFILE2"
		;;
	esac

	## Add pcb spec document
	zip -q -u "${CURPRJNMBR}.zip" "$SPECFILE1" 
	echo '  '"$SPECFILE1"

	## Move zip into project path and add specification pdf
	#mv "${CURPRJNMBR}.zip" "$PRJPATH/"
	echo 'Done.'
}


## Convert an excel document into a nice and readable pdf table using SOFFICE, in this case
## soffice, and htmldoc
## -------------------------------------------------------------------------------------------------
function bom2pdf ()
{
        local docname="$1"
        local docext="$2"
        local htmlname="${docname}.html"
        local pdfname="${docname}${PDFEXT}"
	local BOMPATH=""
	eval BOMPATH="$DEFBOMPATH"
	cd "$BOMPATH"

        if [ ! -e ${docname}${docext} ]
        then
                echo
                echo 'Warning: No document' "${docname}${docext}" 'found.'
                exit
        fi
        echo
        echo 'Creating '"$pdfname"' from '"${docname}${docext}"'...'
	## Convert office table to html
	if [[ $(pgrep "$SOFFICE") > 0 ]]
	then
		echo
		echo "Warning: $SOFFICE already running!"
		echo
	fi
	"$SOFFICE" --calc --convert-to html "${docname}${docext}"\
	>/dev/null 2>&1
	## Convert html table to pdf
	"$HTMLDOC" --quiet --webpage --textfont Arial --bodyfont Arial\
	--fontsize 10 --size 297x210mm --left 10mm --top 10mm\
	-f "$pdfname" "$htmlname" 

	rm -f "$htmlname"
	cd "$WORKPATH"
	echo 'Done.'
}


## Run the script
## =================================================================================================

## Get help if needed and evaluate working paths
help "$ARG"
setpaths "$ARG"

## Check for existing erp info or create new, if not existing
## Set global vars 'BRDNMBR' and 'PRJNMBR'
erpinfo

echo
echo '  --------------------------------------------------'
echo '   PCB Fabrication: '"$BRDNMBR"
echo '  --------------------------------------------------'


## Create a new spec document from template or edit, if existing
maketex PCB ""

## Create zip package for pcb manufacturer
zippkg PCB "$BRDNMBR"

## Copy this to released folder
release "$WORKPATH" "${BRDNMBR}.zip"

## If there exists ERP project number, assuming that there is assembly data
## and thus, create assembly zip package as well
if [ "$PRJNMBR" != "" ] && [ "$PRJNMBR" != "--" ]
then
        IFS=$' '
        for CURPRJNMBR in $PRJNMBR
        do
                echo
                echo '  --------------------------------------------------'
                echo '   PCB Assembly: '"$CURPRJNMBR"
                echo '  --------------------------------------------------'

		## Create a new spec document from template or edit, if existing
		maketex ASM "$CURPRJNMBR"

                ## Create pdf from bom document
                bom2pdf "$CURPRJNMBR$SEP$BOMDESC" "$BOMDOCEXT"

                ## Create zip package for pcb manufacturing and assembly
                zippkg ASM "$CURPRJNMBR"

                ## Release manufacturing data
                release "${WORKPATH}" "${CURPRJNMBR}.zip"

                ## Release schematics
		eval SCHPATH="$DEFSCHPATH"
                release "${SCHPATH}" "${CURPRJNMBR}${SEP}${ALTIUMSCHEXT}"
        done
fi
